import { type Module, inject, DeepPartial } from "langium";
import {
  createDefaultModule,
  createDefaultSharedModule,
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type PartialLangiumServices,
} from "langium/lsp";
import { JackGeneratedModule, JackGeneratedSharedModule } from "./generated/module.js";
import { JackValidator, registerValidationChecks } from "./jack-validator.js";
// import { isExpression, isLetStatement, isSubroutineDec } from "./generated/ast.js";
import { JackScopeComputation } from "./jack-scope-computation.js";
import { JackWorkspaceManager } from "./jack-workspace.js";
import { JackScopeProvider } from "./jack-scope-provider.js";
import { JackCompletionProvider } from "./jack-completion.js";
import { JackSignatureHelpProvider } from "./jack-signature.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type JackAddedServices = {
  validation: {
    JackValidator: JackValidator;
  };
  references: {
    ScopeProvider: JackScopeProvider;
    ScopeComputation: JackScopeComputation;
  };
  // lsp: {
  //   CompletionProvider: JackCompletionProvider;
  //   SignatureHelp: JackSignatureHelpProvider;
  // };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type JackServices = LangiumServices & JackAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const JackModule: Module<JackServices, PartialLangiumServices & JackAddedServices> = {
  validation: {
    JackValidator: () => new JackValidator(),
  },
  references: {
    ScopeProvider: (services) => new JackScopeProvider(services),
    ScopeComputation: (services) => new JackScopeComputation(services),
  },
  lsp: {
    CompletionProvider: (services) => new JackCompletionProvider(services),
    SignatureHelp: (services) => new JackSignatureHelpProvider(services),
  },
};

export type JackSharedServices = LangiumSharedServices;

export const JackSharedModule: Module<JackSharedServices, DeepPartial<JackSharedServices>> = {
  workspace: {
    WorkspaceManager: (services) => new JackWorkspaceManager(services),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createJackServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Jack: JackServices;
} {
  const shared = inject(createDefaultSharedModule(context), JackGeneratedSharedModule, JackSharedModule);
  const Jack = inject(createDefaultModule({ shared }), JackGeneratedModule, JackModule);
  shared.ServiceRegistry.register(Jack);
  registerValidationChecks(Jack);
  return { shared, Jack };
}
